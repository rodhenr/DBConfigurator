@using Configurator.Interfaces
@using Configurator.Data.Models
@inject ITableService TableService
@inject NavigationManager NavigationManager

@page "/add"

<div class="insert-container">
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="NavigateToIndexPage"/>
    <h3>Add a new register - @_tableName</h3>
    <div class="insert-main">
        @foreach (var column in _columns)
        {
            if (column.ColumnName.EndsWith("Id"))
            {
                <MudSelect @bind-Value="_inputValues[column.ColumnName]" T="string" Label="@column.ColumnName" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense">
                    @foreach (var foreignTableData in column.Data)
                    {
                        <MudSelectItem Value="@foreignTableData.Key">@foreignTableData.Value</MudSelectItem>
                    }
                </MudSelect>
            }
            else
            {
                <MudTextField @bind-Value="_inputValues[column.ColumnName]" Label="@column.ColumnName" Variant="Variant.Filled" Margin="Margin.Dense"/>
            }
        }
    </div>
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="InsertIntoDatabase"/>
</div>

@code {
    private List<ColumnInformation> _columns = new();
    private Dictionary<string, string> _inputValues = new();
    private string? _tableName = "0";

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        _tableName = queryParams["tableName"];

        if (_tableName is null) throw new Exception("Error");

        var columnsData = await TableService.GetTableInformationSchema(_tableName);

        foreach (var column in columnsData.Where(column => column.ColumnName.EndsWith("Id")))
        {
            var data = await TableService.GetForeignTableData(column.ColumnName.Replace("Id", ""));
            column.Data = data;
        }

        _columns.AddRange(columnsData);

        foreach (var column in columnsData)
        {
            _inputValues.Add(column.ColumnName, column.ColumnName.EndsWith("Id") ? "0" : "");
        }
    }

    private void NavigateToIndexPage()
    {
        NavigationManager.NavigateTo($"/");
    }

    private async Task InsertIntoDatabase()
    {
        await TableService.InsertIntoDatabaseAsync(_inputValues, _tableName);
        NavigateToIndexPage();
    }

}