@using Configurator.Data.Models
@inject Interfaces.IPackagesService PackageService

<div class="selection-container">
    <div class="package-selection">
        <label>
            Group:
            <InputSelect @bind-Value="SelectedGroupId" @bind-Value:after="OnPackageGroupValueChanged">
                <option value="0"></option>
                @foreach (var package in _packageGroups)
                {
                    <option value="@package.Id">@package.PackageGroupName</option>
                }
            </InputSelect>
        </label>
    </div>
    <div class="table-selection">
        <label>
            Package:
            <InputSelect Value="@SelectedTableName" ValueExpression="@(() => SelectedTableName)" ValueChanged="@((string e) => OnPackageValueChanged(e))">
                <option value="0"></option>
                @foreach (var package in _packages)
                {
                    <option value="@package.TableName">@package.TableName</option>
                }
            </InputSelect>
        </label>
    </div>
</div>

@code {
    private IEnumerable<PackageGroup> _packageGroups = new List<PackageGroup>();
    private IEnumerable<Package> _packages = new List<Package>();
    private int SelectedGroupId { get; set; }

    [Parameter]
    public string? SelectedTableName { get; set; }

    [Parameter]
    public EventCallback<string> GetTableData { get; set; }

    [Parameter]
    public EventCallback<string> SelectedTableNameChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _packageGroups = await PackageService.GetPackageGroupsAsync();
    }

    private async Task OnPackageGroupValueChanged()
    {
        await SelectedTableNameChanged.InvokeAsync("0");
        _packages = await PackageService.GetPackagesAsync(SelectedGroupId);
    }

    private async Task OnPackageValueChanged(string packageName)
    {
        await SelectedTableNameChanged.InvokeAsync(packageName);
        if (packageName != "0") await GetTableData.InvokeAsync(packageName);
        StateHasChanged();
    }

}